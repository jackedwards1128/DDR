import java.util.ArrayList;

// trap queen by fetty
// nokia by drake
// luther by kdot and sza

// hot to go by chappel
// see you again by tyler
// dark thoughts by tecca
// snow strippers remix ?

public class Song {
    private ArrayList<double[]> notes;
    private Game backend;
    private String music;
    private String name;
    private String mapString;


    private String trapQueen
    private String nokia
    private String take
    private String luthern";
    private String luther2 = "A441T0A715T3A1453T0A1498T3A1541T2A1579T1A1626T0A1672T3A1715T1A2110T0A2150T3A2193T2A2233T1A2278T2A2320T0A2374T3A2414T1A2635T0A2676T2A2715T1A2761T3A3064T3A3088T3A3110T3A3415T3A3456T3A3456T0A3543T2A3586T1A3629T3A3668T0A3714T2A3756T2A3803T3A3845T1A3885T0A3931T2A3979T3A4019T3A4065T1A4108T2A4152T1A4194T0A4236T2A4278T1A4324T2A4368T3A4411T2A4454T1A4495T0A4540T2A4580T1A4628T3A4668T2A4712T1A4755T0A4798T2A4841T1A4891T3A4934T2A4976T1A5017T0A5061T2A5104T1A5144T0A5192T2A5233T1A5277T3A5318T2A5370T1A5410T0A5434T0A5456T3A5499T2A5542T1A5884T0A5929T2A5996T1A6022T3A6063T2A6106T0A6150T1A6585T2A6627T0A6673T1A6713T3A6740T2A7110T0A7112T3A7150T2A7195T1A7234T0A7285T3A7320T3A7365T2A7411T1A7452T0A7498T0A7539T2A7583T3A7627T2A7632T3A7670T3A7672T2A7715T0A7717T2A7755T0A7758T2A7801T1A7840T2A7883T0A7926T3A7973T2A8018T1A8061T2A8151T0A8239T3A8493T0A8512T2A8586T3A8605T2A8720T2A8763T0A8846T0A8929T0A9019T3A9102T0A9190T2A9215T3A9279T0A9325T3A9372T2A9453T3A9535T0A9627T3A9762T2A9801T3A9885T0A9930T1A9974T2A10057T0A10148T3A10278T2A10364T1A10452T0A10496T3A10631T2A10716T3A10758T3A10804T0A10841T0A10934T2A10935T3A10973T3A10973T2A11060T0A11062T2A11103T0A11105T2A11152T1A11191T1A11285T3A11319T2A11407T1A11450T0A11497T2A11538T0A11633T1A11670T3A11713T2A11756T1A11799T0A12150T0A12153T3A12195T2A12239T1A12279T0A12326T0A12366T3A12409T2A12454T1A12500T0A12543T0A12587T3A12630T2A12673T1A12711T2A12758T3A12803T2A12847T1A12892T1A12929T0A12972T0A13023T2A13231T3A13393T1A13439T0A13539T3A13586T2A13632T0A13671T1A13715T2A13761T3A13799T1A13850T2A13891T0A14236T3A14279T1A14319T2A14366T0A14407T3A14452T1A14498T2A14543T0A14762T2A14844T3A14929T2A15017T0A15099T3A15190T2A15280T1A15366T3A15446T2A15537T0A15629T0A15667T0A15757T2A15802T3A15846T2A15890T1A15978T0A16018T0A16084T2A16127T1A16245T3A16326T3A16367T3A16411T0A16450T0A16499T2A16543T2A16589T1A16631T1A16677T3A16712T3A16757T2A16803T2A16847T1A16882T1A16933T0A16973T0A17018T2A17059T2A17110T3A17149T3A17193T2A17233T2A17280T1A17321T1A17365T0A17408T3A17451T2A17491T1A17538T0A17539T3A17667T2\n";

    private String testnotes = "A284T3A312T0A357T2A389T1A421T3A455T0A483T3A503T3A533T1A551T1A586T2A608T2A637T0A692T0A694T3A723T0A724T3A775T2A793T2A817T1";

    private String takeU_unce

    public Song(Game backend, String music, String name) {
        this.notes = new ArrayList<double[]>();
        this.backend = backend;
        this.music = music;
        this.name = name;
        this.mapString = "";

        loadSongMapping(name);
    }

    public double[] get(int index) {
        return notes.get(index);
    }

    public int getSize() {
        return notes.size();
    }

    public String getMusic() {
        return music;
    }

    public String getName() {
        return name;
    }

    public void loadSongMapping(String song) {
        switch (song) {
            case "trapqueen":
                mapString = trapQueen;
                break;
            case "nokia":
                mapString = nokia;
                break;
            case "takeu":
                mapString = takeU;
                break;
            case "luther1":
                mapString = luther1;
                break;
            case "luther2":
                mapString = luther2;
                break;
            case "testnotes":
                mapString = testnotes;
                break;
        }
    }

    public boolean parseMapString(boolean luther, boolean aSyncTwo) {
        if (mapString.indexOf("A") == -1) {
            return false;
        }
        mapString = mapString.substring(1);
        double time = Float.parseFloat(mapString.substring(0,mapString.indexOf("T"))) / 100;
        mapString = mapString.substring(mapString.indexOf("T")+1);
        int dir = Integer.parseInt(mapString.substring(0,1));
        mapString = mapString.substring(1);

        if (!luther) {
            backend.addArrow(time, dir, false);
            if (backend.getWindow().getGameState() == "two player song")
                backend.addArrow(time, dir, true);
        } else {
            if (aSyncTwo)
                backend.addArrow(time, dir, true);
            else
                backend.addArrow(time, dir, false);
        }

        return true;
    }

    public void clearMapString() {
        mapString = "";
    }

    public String getUnceString() {
        return takeU_unce;
    }

    public void trapQueen() {

        double startOffset = 0.0;
        double noteOffset = 0.00;

        double BPMstep = 60.0 / 148;
        double startingDing = 0.608 + noteOffset;
        double startingDing2 = 0.810 + noteOffset;


        notes.add(new double[]{3.72 + startOffset, 0});
        notes.add(new double[]{0, 3});
        notes.add(new double[]{startingDing, 2});
        notes.add(new double[]{startingDing, 0});
        notes.add(new double[]{startingDing2, 3});
        notes.add(new double[]{startingDing, 3});
        notes.add(new double[]{startingDing,1});
        notes.add(new double[]{startingDing,2});
        notes.add(new double[]{startingDing, 0});
        notes.add(new double[]{0, 3});
        notes.add(new double[]{startingDing2,2});
        notes.add(new double[]{startingDing, 0});
        notes.add(new double[]{startingDing,1});
        notes.add(new double[]{startingDing,1});
        notes.add(new double[]{startingDing, 1});
        notes.add(new double[]{0, 2});
        notes.add(new double[]{startingDing2,3});
        notes.add(new double[]{startingDing, 0});
        notes.add(new double[]{startingDing,2});
        notes.add(new double[]{startingDing,1});
        notes.add(new double[]{startingDing, 0});
        notes.add(new double[]{0, 2});
        notes.add(new double[]{startingDing2,3});
        notes.add(new double[]{startingDing, 2});
        notes.add(new double[]{startingDing,1});
        notes.add(new double[]{startingDing,2});
        notes.add(new double[]{startingDing, 0});
        notes.add(new double[]{startingDing2-0.2,0});
        notes.add(new double[]{0, 3});
        notes.add(new double[]{startingDing, 0});
        notes.add(new double[]{0, 3});
        notes.add(new double[]{startingDing, 0});
        notes.add(new double[]{0, 3});
        notes.add(new double[]{startingDing, 1});
        notes.add(new double[]{0, 2});
        notes.add(new double[]{startingDing, 0});
        notes.add(new double[]{0, 3});
        notes.add(new double[]{startingDing2,2});
        notes.add(new double[]{startingDing, 2});
        notes.add(new double[]{startingDing, 0});
        notes.add(new double[]{startingDing, 0});
        notes.add(new double[]{startingDing, 1});
        notes.add(new double[]{0, 3});
        notes.add(new double[]{startingDing2,3});
        notes.add(new double[]{startingDing, 0});
        notes.add(new double[]{startingDing,2});
        notes.add(new double[]{startingDing,1});
        notes.add(new double[]{startingDing, 0});
        notes.add(new double[]{0, 2});
        notes.add(new double[]{startingDing2,1});
        notes.add(new double[]{0, 0});
        notes.add(new double[]{startingDing, 1});
        notes.add(new double[]{0, 2});
        notes.add(new double[]{startingDing,1});
        notes.add(new double[]{0, 0});
        notes.add(new double[]{startingDing,1});
        notes.add(new double[]{0, 2});
        notes.add(new double[]{startingDing, 0});
        notes.add(new double[]{0, 3});
        notes.add(new double[]{startingDing2,1});

        notes.add(new double[]{BPMstep, 0});
        notes.add(new double[]{BPMstep, 0});
        notes.add(new double[]{BPMstep, 0});
        notes.add(new double[]{BPMstep, 0});

        notes.add(new double[]{BPMstep, 3});
        notes.add(new double[]{BPMstep, 3});
        notes.add(new double[]{BPMstep, 3});
        notes.add(new double[]{BPMstep, 3});

        notes.add(new double[]{BPMstep, 0});
        notes.add(new double[]{BPMstep, 3});
        notes.add(new double[]{BPMstep, 0});
        notes.add(new double[]{BPMstep, 3});

        notes.add(new double[]{BPMstep, 0});
        notes.add(new double[]{0, 3});
        notes.add(new double[]{BPMstep, 0});
        notes.add(new double[]{0, 3});
        notes.add(new double[]{BPMstep, 0});
        notes.add(new double[]{0, 3});
        notes.add(new double[]{BPMstep, 0});
        notes.add(new double[]{0, 3});

        notes.add(new double[]{startingDing, 2});
        notes.add(new double[]{0, 1});
        notes.add(new double[]{startingDing,2});
        notes.add(new double[]{0, 3});
        notes.add(new double[]{startingDing,2});
        notes.add(new double[]{0, 1});
        notes.add(new double[]{startingDing, 2});
        notes.add(new double[]{0, 3});
        notes.add(new double[]{startingDing2,1});
        notes.add(new double[]{startingDing, 0});
        notes.add(new double[]{startingDing,1});
        notes.add(new double[]{startingDing,1});
        notes.add(new double[]{startingDing, 1});
        notes.add(new double[]{0, 2});
        notes.add(new double[]{startingDing2,2});

        notes.add(new double[]{startingDing2,2});
        notes.add(new double[]{startingDing, 2});
        notes.add(new double[]{startingDing, 0});
        notes.add(new double[]{startingDing, 0});
        notes.add(new double[]{startingDing, 1});

        notes.add(new double[]{startingDing2,3});
        notes.add(new double[]{startingDing, 0});
        notes.add(new double[]{startingDing, 1});
        notes.add(new double[]{startingDing, 2});
        notes.add(new double[]{startingDing, 1});

        notes.add(new double[]{BPMstep, 3});
        notes.add(new double[]{BPMstep, 3});
        notes.add(new double[]{BPMstep, 3});
        notes.add(new double[]{BPMstep, 3});

        notes.add(new double[]{BPMstep/2, 3});
        notes.add(new double[]{BPMstep/2, 3});
        notes.add(new double[]{BPMstep/2, 3});
        notes.add(new double[]{BPMstep/2, 3});
        notes.add(new double[]{BPMstep/2, 3});
        notes.add(new double[]{BPMstep/2, 3});
        notes.add(new double[]{BPMstep/2, 3});
        notes.add(new double[]{BPMstep/2, 3});

        notes.add(new double[]{(BPMstep*4)-0.4, 0});
        notes.add(new double[]{0, 3});
        notes.add(new double[]{BPMstep*2, 0});
        notes.add(new double[]{BPMstep/2, 0});
        notes.add(new double[]{BPMstep/2, 1});
        notes.add(new double[]{BPMstep/2, 1});
        notes.add(new double[]{BPMstep/2, 2});
        notes.add(new double[]{BPMstep/2, 2});
        notes.add(new double[]{BPMstep/2, 3});
        notes.add(new double[]{BPMstep/2, 3});
        notes.add(new double[]{BPMstep/2, 0});
        notes.add(new double[]{BPMstep/2, 1});
        notes.add(new double[]{BPMstep/2, 0});
        notes.add(new double[]{BPMstep/2, 1});

        notes.add(new double[]{startingDing2-1.1,2});
        notes.add(new double[]{startingDing, 1});
        notes.add(new double[]{startingDing, 0});
        notes.add(new double[]{startingDing, 0});
        notes.add(new double[]{startingDing, 3});

        notes.add(new double[]{startingDing2,1});
        notes.add(new double[]{startingDing, 0});
        notes.add(new double[]{0, 3});
        notes.add(new double[]{startingDing, 3});
        notes.add(new double[]{startingDing, 1});
        notes.add(new double[]{startingDing, 0});

        notes.add(new double[]{startingDing2,2});
        notes.add(new double[]{startingDing, 1});
        notes.add(new double[]{startingDing, 0});
        notes.add(new double[]{startingDing, 0});
        notes.add(new double[]{startingDing, 3});

        notes.add(new double[]{startingDing2,1});
        notes.add(new double[]{startingDing, 2});
        notes.add(new double[]{startingDing, 1});
        notes.add(new double[]{startingDing, 2});
        notes.add(new double[]{startingDing, 1});

        notes.add(new double[]{BPMstep, 0});
        notes.add(new double[]{BPMstep, 1});
        notes.add(new double[]{BPMstep, 2});
        notes.add(new double[]{BPMstep, 3});
        notes.add(new double[]{BPMstep, 3});
        notes.add(new double[]{BPMstep, 2});
        notes.add(new double[]{BPMstep, 1});
        notes.add(new double[]{BPMstep, 0});
    }

    public void nokia() {
        double startOffset = 3.0;
        double noteOffset = 0.0;

        double BPMstep = (60.0 / 126) - 0.003;
        double startingDing = 0.608 + noteOffset;
        double startingDing2 = 0.810 + noteOffset;

        notes.add(new double[]{startOffset, 0});
        notes.add(new double[]{BPMstep, 0});
        notes.add(new double[]{BPMstep, 0});
        notes.add(new double[]{BPMstep, 0});
        notes.add(new double[]{BPMstep, 0});
        notes.add(new double[]{BPMstep/2, 3});
        //
        notes.add(new double[]{BPMstep-0.07, 0});
        notes.add(new double[]{BPMstep, 2});
        notes.add(new double[]{0, 0});
        notes.add(new double[]{BPMstep, 1});
        notes.add(new double[]{BPMstep, 3});

        notes.add(new double[]{BPMstep, 3});
        notes.add(new double[]{BPMstep/3, 2});
        notes.add(new double[]{BPMstep/3, 2});
        notes.add(new double[]{BPMstep/3, 2});
        notes.add(new double[]{BPMstep, 1});
        notes.add(new double[]{BPMstep, 0});

        notes.add(new double[]{BPMstep, 0});
        notes.add(new double[]{BPMstep, 3});
        notes.add(new double[]{BPMstep, 1});
        notes.add(new double[]{0, 3});
        notes.add(new double[]{BPMstep, 3});

        notes.add(new double[]{BPMstep, 2});
        notes.add(new double[]{BPMstep, 2});
        notes.add(new double[]{BPMstep, 0});
        notes.add(new double[]{BPMstep/2, 2});
        notes.add(new double[]{BPMstep/2, 0});

        notes.add(new double[]{BPMstep, 0});
        notes.add(new double[]{BPMstep/2, 3});
        notes.add(new double[]{BPMstep, 0});
        //notes.add(new double[]{BPMstep, 0});
        notes.add(new double[]{BPMstep/2, 1});

        notes.add(new double[]{BPMstep*4, 0});
        notes.add(new double[]{BPMstep*4, 3});

        notes.add(new double[]{BPMstep, 1});
        notes.add(new double[]{0, 2});
        notes.add(new double[]{BPMstep, 1});
        notes.add(new double[]{0, 2});
        notes.add(new double[]{BPMstep, 1});
        notes.add(new double[]{0, 2});
        notes.add(new double[]{BPMstep, 1});
        notes.add(new double[]{0, 2});

        notes.add(new double[]{BPMstep, 0});
        notes.add(new double[]{0, 3});
        notes.add(new double[]{BPMstep*4, 0});
        notes.add(new double[]{0, 3});

        notes.add(new double[]{BPMstep*4, 1});
        notes.add(new double[]{BPMstep, 2});

        notes.add(new double[]{BPMstep*3, 0});
        notes.add(new double[]{BPMstep, 3});

        notes.add(new double[]{BPMstep*3, 3});
        notes.add(new double[]{BPMstep, 0});

        notes.add(new double[]{BPMstep*3, 1});
        notes.add(new double[]{BPMstep, 2});

        notes.add(new double[]{BPMstep*3, 1});
        notes.add(new double[]{BPMstep, 1});
        notes.add(new double[]{BPMstep, 1});
        notes.add(new double[]{BPMstep, 1});
        notes.add(new double[]{0, 3});
        notes.add(new double[]{BPMstep*2/3, 0});
        notes.add(new double[]{0, 3});
        notes.add(new double[]{BPMstep*2/3, 0});
        notes.add(new double[]{0, 3});
        notes.add(new double[]{BPMstep*2/3, 0});
        notes.add(new double[]{0, 3});
        notes.add(new double[]{BPMstep*2/3, 0});
        notes.add(new double[]{0, 3});
        notes.add(new double[]{BPMstep*2/3, 0});
        notes.add(new double[]{0, 3});
        notes.add(new double[]{BPMstep*2/3, 0});
        notes.add(new double[]{0, 3});

        notes.add(new double[]{BPMstep*2, 0});
        notes.add(new double[]{BPMstep, 1});
        notes.add(new double[]{0, 3});
        notes.add(new double[]{BPMstep, 3});

        notes.add(new double[]{BPMstep, 2});
        notes.add(new double[]{BPMstep, 2});
        notes.add(new double[]{BPMstep, 0});
        notes.add(new double[]{BPMstep/2, 2});
        notes.add(new double[]{BPMstep/2, 0});
    }
}
